# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

stages:
- stage: Build
  displayName: 'Build'

  jobs:
  - job: BuildDEV
    pool:
      vmImage: 'windows-latest'

    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: restore
        projects: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build WebApp'
      inputs:
        command: build
        projects: '**/*.sln'
        arguments: '--configuration Debug'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Create Package'
      inputs:
        command: publish
        projects: '**/*.sln'
        arguments: '--configuration Debug --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
        publishWebProjects: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Package'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'TailSpin'

    - task: DotNetCoreCLI@2
      displayName: 'Test Package'
      inputs:
        command: test
        projects: '**/*.sln'
        arguments: '--configuration Debug'

    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      inputs:
        targetFiles: '**/*.tf'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '__'
        tokenSuffix: '__'
        useLegacyPattern: false
        enableTelemetry: true
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform 0.12.26'
      inputs:
        terraformVersion: 0.12.26

    - task: TerraformCLI@0
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendType: 'azurerm'
        backendServiceArm: 'rg-devopsday-am-sb'
        ensureBackend: true
        backendAzureRmResourceGroupName: 'rg-devopsday-am-sb'
        backendAzureRmResourceGroupLocation: 'AustraliaEast'
        backendAzureRmStorageAccountName: 'saterraformamsb'
        backendAzureRmStorageAccountSku: 'Standard_LRS'
        backendAzureRmContainerName: 'deployments'
        backendAzureRmKey: 'terraform'

    - task: TerraformCLI@0
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        environmentServiceName: 'rg-devopsday-am-sb'


- stage: DeployDEV
  displayName: 'Deploy Development'

  jobs:
  - deployment: Deploy
    displayName: 'Deploy Development'
    pool:
      vmImage: 'windows-latest'

    environment: 'Development'

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            inputs:
              targetFiles: '**/*.tf'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              enableTelemetry: true
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Use Terraform 0.12.26'
            inputs:
              terraformVersion: 0.12.26

          - task: TerraformCLI@0
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              backendType: 'azurerm'
              backendServiceArm: 'rg-devopsday-am-sb'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'rg-devopsday-am-sb'
              backendAzureRmResourceGroupLocation: 'AustraliaEast'
              backendAzureRmStorageAccountName: 'saterraformamsb'
              backendAzureRmStorageAccountSku: 'Standard_LRS'
              backendAzureRmContainerName: 'terraform'
              backendAzureRmKey: 'terraform.tfstate'

          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
              environmentServiceName: 'rg-devopsday-am-sb'
          

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              itemPattern: 
              targetPath: '$(Build.ArtifactStagingDirectory)'


          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'rg-devopsday-am-sb'
              appType: 'webApp'
              WebAppName: 'webapp-tailspin-am-dev'
              packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- stage: DeployQA
  displayName: 'Deploy QA'

  jobs:
  - deployment: Deploy
    displayName: 'Deploy QA'
    pool:
      vmImage: 'windows-latest'

    environment: 'QA'

    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                
                Write-Host "Deploy in QA"